[workspace]
members = ["codec", "codec-macros", "data", "proxy"]
resolver = "2"

[workspace.package]
edition = "2024"
publish = false

[workspace.lints.clippy]

# Treat common classes of issues as hard errors across the workspace.
cargo = { level = "deny", priority = -1 }      # bad Cargo metadata/usages
complexity = { level = "deny", priority = -1 } # hard-to-read/maintain code
pedantic = { level = "deny", priority = -1 }   # strict correctness/clarity
perf = { level = "deny", priority = -1 }       # performance pitfalls
style = { level = "deny", priority = -1 }      # inconsistent style
suspicious = { level = "deny", priority = -1 } # likely bugs/typos

# Enforce no-std friendly code: prefer core/alloc, avoid std.
alloc_instead_of_core = "deny" # using alloc when core is sufficient
std_instead_of_alloc = "deny"  # using std where alloc suffices
std_instead_of_core = "deny"   # using std where core suffices

# Forbid silent panics via unwrap; force explicit failure context.
unwrap_used = "deny" # require expect(..) with a message

# Avoid floating-point unless explicitly vetted (determinism, perf, WASM/no-std).
float_arithmetic = "deny"

# Require justification for broad allowances; enforce meaningful asserts.
allow_attributes_without_reason = "deny" # demand rationale in #[allow(..)]
missing_assert_message = "deny"          # asserts must include a message

# Discourage Rc in buffer/mutex scenarios (use Arc/Mutex/RwLock appropriately).
rc_buffer = "deny"
rc_mutex = "deny"

# Keep module names and file names aligned for discoverability.
self_named_module_files = "deny"

# Ban accident-prone tokens and suffixes that reduce readability.
semicolon_outside_block = "deny"
unseparated_literal_suffix = "deny"

# Improve readability and API surface quality.
single_char_lifetime_names = "deny" # prefer descriptive lifetimes
unused_trait_names = "deny"         # remove dead trait names

# Prevent noise and brittle patterns in matches/imports.
unnecessary_self_imports = "deny"
unneeded_field_pattern = "deny"

# Avoid needless allocations/conversions in hot paths.
str_to_string = "deny"        # prefer .to_owned() or borrow
string_to_string = "deny"     # redundant clone-like conversion
string_lit_chars_any = "deny" # inefficient char iteration on literals

# Donâ€™t silently drop Ok values; make intent explicit.
unused_result_ok = "deny"

[workspace.dependencies]
codec = { path = "codec" }
codec-macros = { path = "codec-macros" }
data = { path = "data" }

clap = "4.5.46"
env_logger = "0.11.8"
flate2 = "1.1.2"
json = "0.12.4"
log = "0.4.27"
